package Round

import public UnitSpawner
import public Artifact
import public ItemReward
import public Stats
import public Difficulty

import ErrorHandling
import TimerUtils
import Orb
import Music

import LinkedList
import GladiatorSystem
import GameSettings
import initlater FinishRound
import Players
import TrainingPoints
import Mastery
import UtilCommands
import ObjectIds


//=========================================================================================================================================================
 

public class Round

    protected static let rounds = new LinkedList<Round>
    protected static var nextId = 0
    
    private static int totalNumberOfRounds = 0
    private static int currentRoundNumber = 0
    private static boolean roundWon = false
    protected static Round currentRound
    private static boolean isBossRound = false
    private static boolean instantSpawn = false

    private static boolean aRoundIsRunning = false
    static unit bossUnit = null

    protected let spawners = new LinkedList<UnitSpawner>
    protected int id
    protected int number
    protected int goldReward
    protected int trainingPointsReward
    protected let itemRewards = new LinkedList<ItemReward>
    protected int abilityReward = -1 // Number
    protected real healthOrb_FlatToHealInstant
    protected real healthOrb_PercToHealInstant
    protected real healthOrb_FlatToHealOverTime
    protected real healthOrb_PercToHealOverTime
    protected real healthOrb_SpawnDuration
    protected timer timer_HealthOrbDuration
    protected timer timer_HealthOrbSpawn
    protected timer timer_RoundFinishCheck
    protected string title
    protected string description
    protected string music = "TheAssassinLooms.mp3"
    protected  int artifactsToRelease = 0 
    protected var level = 0
    protected var playerCount = 0

    protected UnitStatCallback scaleStatsCallback = null


    Round_RemoteFunction codeOnClear = null
    Round_RemoteFunction codeOnPrepare = null
    Round_RemoteFunction codeOnFadeIn = null
    Round_RemoteFunction codeOnStart = null
    Round_RemoteFunction codeOnHeroDeath = null
    Round_RemoteFunction codeOnLastUnitDeath = null


    private static SoundDefinition snd_RoundInfo = new SoundDefinition(Sounds.questLog, false)

    private static let ROUND_FINISH_CHECK_FREQ = 1.0


// ======================================================================================================================================

// Methods

    //---------------------------------------------------------------------------------------------------------------------------------------
    //  Creation and management functions

    construct() 
         
        totalNumberOfRounds++
        number = totalNumberOfRounds

        if number == 1
            currentRound = this
            currentRoundNumber = 1

        timer_HealthOrbDuration = getTimer()..setData(this castTo int)
        timer_HealthOrbSpawn = getTimer()..setData(this castTo int)
        timer_RoundFinishCheck = getTimer()..setData(this castTo int)

        id = nextId
        nextId++
        rounds.push(this)
    
    
    
//---------------------------------------------------------------------------------------------------------------------------------------
// Setters & Adders

    function setReward( int goldReward, int trainingPointsReward)
        this.goldReward = goldReward
        this.trainingPointsReward = trainingPointsReward

    function setCodeOnClear( Round_RemoteFunction whichCode )
        this.codeOnClear = whichCode

    function setCodeOnStart( Round_RemoteFunction whichCode )
        this.codeOnStart = whichCode

    function setCodeOnPrepare( Round_RemoteFunction whichCode )
        this.codeOnPrepare = whichCode

    function addSpawner(UnitSpawner spawner) returns UnitSpawner
        spawners.add(spawner)
        return spawner

        
    function setBossRound()
        isBossRound = true

    /** Manually changes the current round to a certain round. If no round
        of that number exists, it will not do change anything */
    static function setCurrentRound(int roundNumber)
        currentRoundNumber = (roundNumber>totalNumberOfRounds) ? currentRoundNumber : roundNumber
        currentRound = rounds.get(currentRoundNumber-1)

    function setTitle(string title)
        this.title = title
        
    function setDescription(string description)
        this.description = description

    /** Heal over time is heal per tick. It lasts for 6 seconds, so 6 ticks. */
    function setHealthOrbSpawn( real duration, real healthFlatToHealInstant, real healthPercToHealInstant, real healthFlatToHealOverTime, real healthPercToHealOverTime )
        this.healthOrb_SpawnDuration = duration
        this.healthOrb_FlatToHealInstant = healthFlatToHealInstant
        this.healthOrb_PercToHealInstant = healthPercToHealInstant
        this.healthOrb_FlatToHealOverTime = healthFlatToHealOverTime
        this.healthOrb_PercToHealOverTime = healthPercToHealOverTime

    function setMusic(string music)
        this.music = music


    /** Adds one or more artifacts as a reward, when winning the round */
    function addArtifactRewards(int numberOfArtifacts)
        this.artifactsToRelease = numberOfArtifacts

    /** Adds one or more artifacts as a reward, when winning the round */
    function addItemRewards(vararg ItemReward items)
        for itemReward in items
            itemRewards.add(itemReward)

    function addAbilityReward(int abilityNumber)
        abilityReward = abilityNumber


    function setCodeOnLastUnitDeath(Round_RemoteFunction whichCode)
        codeOnLastUnitDeath = whichCode
        

    /** Make all rounds instantly spawn all units - only for testing! */
    static function toggleInstantSpawn(boolean toggle)
        instantSpawn = toggle

//---------------------------------------------------------------------------------------------------------------------------------------
// Getters

    function getId() returns int
        return id

    function getNumber() returns int
        return number

    static function isARoundRunning() returns boolean
        return aRoundIsRunning

    static function getCurrentRoundNumber() returns int
        return currentRoundNumber

    static function getNumberOfRounds() returns int
        return totalNumberOfRounds

    static function getCurrentRound() returns Round
        return currentRound

    function getTitle() returns string
        return "|cffffcc00Round "+number.toString() + " - "+title+"|r"

    static function getRounds() returns LinkedList<Round>
        return rounds.copy()

    /** Round number the round is scaled with */
    function getLevel() returns int
        return level

    /** Numbers of players the round is scaled with */
    function getPlayerCount() returns int
        return playerCount
    


//---------------------------------------------------------------------------------------------------------------------------------------
//  Running

    static function setBossUnit(unit boss)
        bossUnit = boss
        isBossRound = true

            
    function initialize()
        timer_RoundFinishCheck.startPeriodic(ROUND_FINISH_CHECK_FREQ, function checkRoundFinish)
        activateSpawners()
        activateHealthOrbSpawn()
        playMusic(music)

        if codeOnStart != null
            codeOnStart.run(this)

            
    function stopSpawners()
        for spawner in spawners
            spawner.stopSpawning()
        

    private function activateSpawners()
        if not spawners.isEmpty()
            for spawner in spawners
                spawner.start()

                if DEBUG and INSTANT_SPAWN
                    spawner.spawnAll()

        
    function clear()
        Orb.destroyAll()
        timer_RoundFinishCheck.pause()
        timer_HealthOrbDuration.pause()
        timer_HealthOrbSpawn.pause()
        if bossUnit != null
            bossUnit.remove()
        for spawner in spawners
            spawner.clear()
        if codeOnClear != null
            codeOnClear.run(this)


    function killSpawnedUnits()
        for spawner in spawners
            spawner.killAll()


    static function clearCurrentRound()
        currentRound.clear()
        

    private function activateHealthOrbSpawn()
        timer_HealthOrbDuration.start(healthOrb_SpawnDuration+0.1, function stopHealthOrbSpawn )
        timer_HealthOrbSpawn.startPeriodic(ORB_SPAWN_FREQ / playerCount, function spawnHealthOrb)
        

    private static function spawnHealthOrb()
        let round = GetExpiredTimer().getData() castTo thistype

        let scale = 1 + (round.level-1) * ORB_ROUND_LVL_SCALE 

        let spawnPos = gg_rct_Arena_Spawn1.randomPoint()
        new HealthOrb(spawnPos)
        ..setHealInstant(
            ORB_INSTANT_FLAT * scale,
            ORB_INSTANT_PERC
        )
        ..setHealOverTime(
            ORB_HOT_FLAT * scale,
            ORB_HOT_PERC,
            ORB_HEAL_DURATION
        )
        

    private static function stopHealthOrbSpawn()
        let round = GetExpiredTimer().getData() castTo thistype
        round.timer_HealthOrbSpawn.pause()


    private static function checkRoundFinish()
        let round = GetExpiredTimer().getData() castTo thistype
        
        var allGladiatorsDead = true
        for gladiator in getAllGladiators()
            if( gladiator.getUnit().isAlive() ) 
                allGladiatorsDead = false
        if( allGladiatorsDead )
            roundLost()
            return

        if( isBossRound and not bossUnit.isAlive() )
            roundWon = true
            currentRound.killSpawnedUnits()
            roundWon()
            return

        var allSpawnersFinished = true
        for spawner in round.spawners
            if not spawner.isFinished() or not spawner.allUnitsAreDead()
                allSpawnersFinished = false
                break
        if( allSpawnersFinished )
            roundWon()
            return
                

    /** Rewards gold, training points and mastery points, and unlock
        new masteries */
    function rewardPoints()
        for p in allPlayers
            p.addGold(goldReward)
            p.addTrainingPoints(TRAINING_POINTS_PER_ROUND)
            p.addMasteryPoints(MASTERY_PER_ROUND)
        unlockMasteryRoundRequirement(number)


    /** Releases all item rewards, and return a list of rewarded items*/
    function rewardItems() returns LinkedList<ItemReward>
        for reward in itemRewards
            reward.release()
        return itemRewards   
        

    static function printNextRound(player p)
        snd_RoundInfo.playForPlayer(p)
        p.print("\nNext round: \n\n{0}".format(currentRound.toString()),7)
        

    function toString() returns string
        return "Round {0} - {1}\n".format(number.toString(),title).withColor(COLOR_HIGHLIGHT) + description

    
    static function setNextRound()
        if currentRoundNumber < totalNumberOfRounds
            currentRoundNumber++
            currentRound = rounds.get(currentRoundNumber-1)
            aRoundIsRunning = false
        else
            error("No more rounds")


    static function setRoundReady()
        aRoundIsRunning = false


    protected static function roundLost()
        roundWon = false
        if bossUnit != null
            bossUnit.setInvulnerable(true)
        currentRound.timer_RoundFinishCheck.pause()
        currentRound.stopSpawners()
        if currentRound.codeOnHeroDeath != null
            currentRound.codeOnHeroDeath.run(currentRound)
        finishRound(false)


    private static function roundWon()
        roundWon = true
        currentRound.timer_RoundFinishCheck.pause()
        currentRound.stopSpawners()
        if currentRound.codeOnLastUnitDeath != null
            currentRound.codeOnLastUnitDeath.run(currentRound)
        finishRound(true)

    
    function setStatScalingCallback(UnitStatCallback callback)
        scaleStatsCallback = callback
        

    function prepare()
        aRoundIsRunning = true
        if( level == 0)
            level = number

        if( playerCount == 0)
            playerCount = allPlayers.size()

        isBossRound = false
        if codeOnPrepare != null
            codeOnPrepare.run(this)


    function scaleUnitStats(unit u)
        var dmgInc = u.getStatInstance(STAT_DAMAGE).getBaseValue()
        dmgInc *= (1+(level-1) * ROUND_LVL_SCALE_POWER)
        dmgInc *= (1+ (playerCount-1) * ROUND_PLAYER_SCALE_POWER)
        u.setStatBase(STAT_DAMAGE, dmgInc)

        var hpInc = u.getStatInstance(STAT_HEALTH).getBaseValue()
        hpInc *= (1 +(level-1) * ROUND_LVL_SCALE_HEALTH)
        hpInc *= (1+ (playerCount-1) *  ROUND_PLAYER_SCALE_HEALTH)
        u.setStatBase(STAT_HEALTH, hpInc)
        

    function getNumberOfItemRewards() returns int
        return itemRewards.size()

    /** Returns round with given ID (not level/number) */ 
    static function getRound(int id) returns thistype
        for round in rounds
            if( round.id == id )
                return round
        return null

               
public interface Round_RemoteFunction
    function run(Round round)
 
                
init
    /*  Single listener on unit stats initialzied for all rounds, to improve
        efficiency. This then call the approriate round's stat adjustment
        callback. */
    afterUnitStatsInitialized() u ->
        if( Round.isARoundRunning() )
            let round = Round.getCurrentRound()
            if( round.scaleStatsCallback == null )
                Log.warn("Stat scaling callback is null for round '{0}'".format(round.getTitle()))
            else
                round.scaleStatsCallback.run(u)
        


//================================================================================================================================================================================================
// CHAT COMMAND
/* Chat commands to handle the rounds with */

init
    let cmd = defineUtilCommand("round")

    cmd.addSubCommand("all")
    ..setAction() (p,args,opts) ->
        SND_CLICK.playForPlayer(p)
        if( Round.rounds.size() == 0 )
            p.print("There are no rounds...", 15)
        else
            p.print("\nPrinting {0} rounds:".format(Round.rounds.size().toString()).highlight(), 15)
            for round in Round.rounds
                p.print( "    {0} (ID: {1}, Level/Number: {2})".format(round.title, round.id.toString(), round.level.toString()), 15)

    cmd.addSubCommand("level")
    ..addArgument(ArgumentType.INT)
    ..setAction() (p,args,opts) ->
        let round = Round.currentRound
        round.level = args.getInt()
        p.print("\nSet round level to: {0} for round {1}".format(
            round.level.toString().highlight(), Round.currentRound.getTitle().highlight()), 5)
        SND_CLICK.playForPlayer(p)

    cmd.addSubCommand("players")
    ..addArgument(ArgumentType.INT)
    ..setAction() (p,args,opts) ->
        let round = Round.currentRound
        round.playerCount = args.getInt()
        p.print("\nSet player count to: {0} for round {1}".format(
            round.playerCount.toString().highlight(), Round.currentRound.getTitle().highlight()), 5)
        SND_CLICK.playForPlayer(p)

    cmd.addSubCommand("next")
    ..addArgument(ArgumentType.INT)
    ..setAction() (p,args,opts) ->
        let nextRound = args.getInt()
        while( Round.currentRound.number < nextRound )
            Round.currentRound
            ..rewardItems()
            ..rewardPoints()
            if( Round.currentRound.abilityReward > 0)
                for gladiator in getAllGladiators()
                    gladiator.unlockNextAbility()
            Round.setNextRound()

        p.print("\nSet next round to {0}".format(Round.currentRound.getTitle().highlight()), 5)
        SND_CLICK.playForPlayer(p)


    cmd.addSubCommand("reset")
    ..addHelpCommand("Reset a running round by making you lose it.")
    ..setAction() (p, args, opts) ->
        if( Round.isARoundRunning() )
            Round.roundLost()

    cmd.addSubCommand("spawners")
    ..addArgument(ArgumentType.INT)
    ..setAction() (p,args,opts) ->
        let id = args.getInt()
        if( id < 0 )
            p.print("\nRound ID cannot be negative", 15)
            SND_ERROR.playForPlayer(p)
        else
            let round = Round.getRound(id)
            if( round == null )
                p.print("\nCouldn't find round with ID {0}".format(id.toString().highlight()), 15)
            else
                SND_CLICK.playForPlayer(p)
                p.print("\nPrinting IDs for {0} spawners for {1}".format(
                     round.spawners.size().toString().highlight(),
                     "Round {0} ({1})".format(round.title, id.toString()).highlight()
                ), 15)
                for spawner in round.spawners
                    p.print("    {0} {1}".format(spawner.getId().toString(), spawner.getSpawnedUnitId().toRawCode().withColor(COLOR_GREY)), 15)