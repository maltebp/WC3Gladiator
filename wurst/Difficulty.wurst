package Difficulty

import UtilCommands
import DialogBox
import Stats
import GameSettings

var difficulty = Difficulty.NORMAL

public interface DifficultyCallback
    function run(Difficulty chosenDifficulty)

public enum Difficulty
    EASY
    NORMAL
    HARD

public function Difficulty.toString() returns string
    switch this
        case EASY
            return "Easy"
        case NORMAL
            return "Normal"
        case HARD
            return "Hard"

public function getDifficulty() returns Difficulty
    return difficulty

public function setDifficulty(Difficulty newDifficulty)
    difficulty = newDifficulty
    
/** Adjusts the unit's stats the current difficulty. */
public function unit.adjustToDifficulty()
    switch getDifficulty()
        case EASY
            this.adjustStatPercentage(STAT_DAMAGE, DIFFICULTY_EASY_POWER )
            this.adjustStatPercentage(STAT_HEALTH, DIFFICULTY_EASY_HEALTH)
        case NORMAL
            this.adjustStatPercentage(STAT_DAMAGE, DIFFICULTY_NORMAL_POWER)
            this.adjustStatPercentage(STAT_HEALTH, DIFFICULTY_NORMAL_HEALTH)
        case HARD
            this.adjustStatPercentage(STAT_DAMAGE, DIFFICULTY_HARD_POWER)
            this.adjustStatPercentage(STAT_HEALTH, DIFFICULTY_HARD_HEALTH)

/** Shows a dialogbox with a button for each difficulty (Easy, Normal, Hard).
    The callback takes the chosen Difficulty as parameter */
public function player.showDifficultyDialog(DifficultyCallback callback)
    let dialogBox = new DialogBox("Choose difficulty")
    ..addDifficultyButton(Difficulty.EASY, callback)
    ..addDifficultyButton(Difficulty.NORMAL, callback)
    ..addDifficultyButton(Difficulty.HARD, callback)
    dialogBox.display(this, true)

// Generic way of adding a difficulty button to dialogbox
function DialogBox.addDifficultyButton(Difficulty difficulty, DifficultyCallback callback )
    this.addButton(difficulty.toString().toLowerCase().firstUpper()) -> 
        setDifficulty(difficulty)
        callback.run(difficulty)
        destroy callback
        destroy this

//================================================================================================================================================================================================
// Test Command

init
    // Change difficulty 
    let cmd = defineUtilCommand("difficulty")
    ..addHelpCommand("Sets the difficulty to either 'easy', 'normal' or 'hard'")
    ..addArgument(ArgumentType.STRING)
    ..setAction() (p, args, opts) -> 

        switch args.getString()
            case "easy"
                setDifficulty(Difficulty.EASY)
                p.print("The difficulty is now set to "+"easy".highlight())
            case "normal"
                setDifficulty(Difficulty.NORMAL)
                p.print("The difficulty is now set to "+"normal".highlight())
            case "hard"
                setDifficulty(Difficulty.HARD)
                p.print("The difficulty is now set to " + "hard".highlight())
            default
                p.print("Unknown difficulty. Must be either 'easy', 'normal' or 'hard'")
       
    // Get Current difficulty
    cmd.addSubCommand("current")
    ..setAction() (p,args,opts) ->
        p.print("\nCurrent difficulty: " + difficulty.toString().toLowerCase().firstUpper().highlight())


