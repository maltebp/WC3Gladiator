package UnitSpawner

import TimerUtils
import public SoundUtils
import LinkedList
import OnUnitEnterLeave
import UtilCommands
import StringUtilsX
import GameSettings
import ObjectIds


/*
---------------------------------------------------------------------------------------------------------------------------------------

    Description
    This class creates object (a spawner) that can spawn units. The spawner may customized in many ways,
    and can be started / at will.

    How To use:
    Create a new object. Doing this will grant you a ready spawner, but it may be altered with the set
    methods.

    To Be Updated:
    - Add several sound, and let it pick a random one (so it's not the same sound, again, again, again)

---------------------------------------------------------------------------------------------------------------------------------------
*/

public class UnitSpawner

//=========================================================================================================================================================

    // Settings

    private static constant boolean ACTIVATEONCONSTRUCT = true

//=========================================================================================================================================================

    // Class Variables
    protected static LinkedList<UnitSpawner> allSpawners = new LinkedList<UnitSpawner>
    protected static var nextSpawnerId = 0

    // Instance Variables
    protected int id
    private real spawnFrequency
    private int spawnCount
    private int currentSpawnCount = 0
    private real spawnFrequencyDeviation
    private real startDelay
    private int  unitId
    private player owner
    private vec2 spawnPos
    private real spawnFacing = -1
    private rect spawnRect
    protected let spawnedUnits = new LinkedList<unit>
    protected let summonedUnits = new LinkedList<unit>
    private unit lastSpawnedUnit
    private timer timer_Spawn
    private boolean isActivated = ACTIVATEONCONSTRUCT
    private string spawnEffect
    private boolean spawning = false
    private unit targetOnSpawn
    private rect targetRect // The rect in which it has to search for a random target
    private boolean getNearestTarget = false
    private SoundDefinition soundOnspawn
    private RemoteFunction<UnitSpawner> codeOnSpawn 

    
// ======================================================================================================================================

    


//---------------------------------------------------------------------------------------------------------------------------------------
//  Creation and management functions

    construct(int unitId, player owner, vec2 spawnPos, real spawnFrequency)
        this.unitId = unitId
        this.spawnFrequency = spawnFrequency
        this.startDelay =  spawnFrequency
        this.spawnPos = spawnPos
        this.owner = owner
        
        id = nextSpawnerId
        nextSpawnerId++
        allSpawners.add(this)

        if( ACTIVATEONCONSTRUCT )
            activate()

    ondestroy
        deactivate()
        allSpawners.remove(this)
        destroy spawnedUnits
        destroy summonedUnits
        if codeOnSpawn != null
            destroy codeOnSpawn

    /** Starts the spawner spawning units. The first spawn will happen after spawnDelay, and all
        spawns after that will happen after spawnFrequency. */
    function start()
        if not isActivated
            activate()
        spawning = true
        currentSpawnCount = 0
        timer_Spawn.start(getRealWithDeviation(startDelay), function spawn) 
        
    /** Stops the unit spawner from spawning. Does not remove units or deactivate
        the spawner. Use deactivate() and clear() for that.*/
    function stopSpawning()
        spawning = false
        timer_Spawn.pause()

    /** Stops the spawner, and removes all the units that it has made */
    function clear()

        // BUG HERE: If units has been removed from game, it doesn't go through the for loops
        // I.e. if the unit has no decay

        if spawnedUnits.size() > 0
            for spawnedUnit in spawnedUnits
                if spawnedUnit != null
                    spawnedUnit.remove()

        if summonedUnits.size() > 0
            for summonedUnit in summonedUnits
                if summonedUnit != null
                    summonedUnit.remove()
            
        lastSpawnedUnit = null
        stopSpawning()
     
    /** Sets up the spawner (creating timers and triggers) */
    function activate()
        isActivated = true
        timer_Spawn = getTimer()..setData(this castTo int)
    
    /** Releases timers and destroys triggers. Calls clear function. */
    function deactivate()
        isActivated = false
        clear()
        timer_Spawn.release()

    function killAll()
        if spawnedUnits.size() > 0
            for spawnedUnit in spawnedUnits
                if spawnedUnit != null
                    spawnedUnit.kill()
        

    function removeUnit(unit u)
        spawnedUnits.remove(u)
        summonedUnits.remove(u)

//---------------------------------------------------------------------------------------------------------------------------------------
// Setters

    /** Sets the amount of that it will make before automatically stopping.
        @param spawnCount The number of units to spawn. 0 means it will spawn
        until it's turned off again (default).*/
    function setSpawnCount(int spawnCount)
        this.spawnCount = spawnCount
        

    /** Sets the start delay of the timer. Default startDelay is spawnFrequency. */
    function setStartDelay(real startDelay)
        this.startDelay = startDelay

    /** Enable random spawn position, by setting a rect in which to find this
        random position.
        @param spawnRect: A rect in which the unit should spawn. If null, it
        will use it's specific position.*/
    function setRandomSpawn(rect spawnRect)
        this.spawnRect = spawnRect
    
    /** Adds a possible deviation (positive and negative) percentage to the frequency
        and startDelay of the unitspawner.
        The deviation is calculated before it spawns a new unit, so that the first unit
        make take x seconds to spawn, but the second might take x*0.95 to spawn.
        @param deviation: the deviation in decimal percent (0.05 = 5%)*/
    function setFrequencyDeviation(real deviation)
        this.spawnFrequencyDeviation = deviation

    
    /** Sets a rect in which to find a random target to attack when spawned. It 
        will "move-attack", so it will attack the first target it meets.
        It will prioritize a specific target set with setUnitTargetOnSpawn(),
        over this (if you by accident set them both).
        @param rectToTarget: The rect in which to search for a target */
    function setRandomTargetOnSpawn(rect rectToTarget )
        this.targetRect = rectToTarget
    
    /** Sets the spawned unit to find the nearest target in the parameter
        rect rectToTarget */
    function setNearestTargetOnSpawn(rect rectToTarget)
        this.targetRect = rectToTarget
        this.getNearestTarget = true

    /** Sets a unit target for the unit spawned to attack, once it spawns.
        If no target is assigned, it will just stand when spawned.
        It will prioritize this over setRandomTargetOnSpawn() if both are
        set by accident.
        @param target: the unit to target when spawned.*/
    function setUnitTargetOnSpawn(unit target)
        this.targetOnSpawn = target
        // FIX THIS: It's appropriate to have the same unit being the target
        // for allt he units spawned with this spawner.

    /** Sets a fixed facing for spawned units.-1 sets it to random, which is default
        @param spawnFacing: the angle in radians. -1 sets it facing to random*/
    function setUnitSpawnFacing( real spawnFacing )
        this.spawnFacing = spawnFacing

    /** Sets an effect to create everytime a unit spawns. The effect is immediately
        destroy, so use an effect which has a "death" animation for it to be shown.
        @param effectPath: the filepath of the effect model to create*/
    function setSpawnEffect(string effectPath)
        this.spawnEffect = effectPath

    /** Creates a sound to play when a unit spawns. It's 3D and is played on the
        spawnPos.
        @ param soundPath: the string path for the sound file. Use Sounds (it's public)*/
    function setSoundOnSpawn( string soundPath )
        this.soundOnspawn = new SoundDefinition(soundPath, false, true)

    /** Sets a piece of code to run whenever a unit spawns. The code will contain the spawner
         instance so that you can get the units and everything.
        @param codeOnSpawn: A lambda expression, which has to use the RemoteFunction
        interface from this package. It has to take UnitSpawner as its only parameter.
        DO NOT pass the same RemoteFunction object to the several spawners - instead
        create seperate objects that call a regular function.*/
    function setCodeOnSpawn( RemoteFunction<UnitSpawner> codeOnSpawn)
        this.codeOnSpawn = codeOnSpawn

    function addSummonedUnit( unit whichUnit )
        summonedUnits.add(whichUnit)

//---------------------------------------------------------------------------------------------------------------------------------------
// Getters

    function getId() returns int
        return id

    function getSpawnedUnitId() returns int
        return unitId

    /** Checks if the spawner is finished; it has been stopped (either by stop()
        or becuase it has spawned spawnCount units)*/
    function isFinished() returns boolean
        return not spawning


    
    static function getSpawner(int id) returns thistype
        for spawner in allSpawners
            if( spawner.id == id )
                return spawner
        return null

    /** Returns a list of ALL the spawners (deactivated, running, stopped etc.)
        @return: A copy of the list of all spawners as arraylist of UnitSpawner type.  */
    static function getAllSpawners() returns LinkedList<UnitSpawner>
        return  allSpawners.copy()

    /** Returns the last spawned unit from THIS spawner. If none has spawned or the
        spawner has been cleared, then it will return null.*/
    function getLastSpawnedUnit() returns unit
        return lastSpawnedUnit

    /** Checks if all spawned units and summoned units connected to this UnitSpawner are dead. */
    function allUnitsAreDead() returns boolean
        if spawnedUnits.size() > 0
            for spawnedUnit in spawnedUnits
                if( spawnedUnit.isAlive() )
                    return false

        if summonedUnits.size() > 0
            for summonedUnits in summonedUnits
                if( summonedUnits.isAlive() )
                    return false
        return true

//---------------------------------------------------------------------------------------------------------------------------------------
// Private Methods

    
    /** Gets a random unit from the spawner's targetRect (this is set with then
        setRandomTargetOnSpawn() method).
        @return:    a random unit from the targetRect, that is alive and is an enemy
        of the owner of the spawner. It returns null if no unit is found.*/
    private function getRandomTargetInRect() returns unit
        
        let targets = ENUM_GROUP..enumUnitsInRect(targetRect)

        // Removing the units not to be hit
        for u in targets
            if( not u.isAlive() or u.getOwner().isAllyOf(owner) )
                targets.removeUnit(u)

        let target = targets.getRandomUnit()
        targets.clear()
        return target

    /** Gets the unit nearest the spawnedUnit from the spawner's targetRect.*/
    private function getNearestTargetInRect(unit spawnedUnit) returns unit 
        let targets = ENUM_GROUP..enumUnitsInRect(targetRect)

        // Removing the units not to be hit
        for u in targets
            if( not u.isAlive() or u.getOwner().isAllyOf(owner) )
                targets.removeUnit(u)

        // Finding nearest target
        real shortestDist = 999999
        unit target = null
        let spawnedUnitPos = spawnedUnit.getPos()
        for u from targets
            let distance = u.getPos().distanceTo(spawnedUnitPos)
            if distance < shortestDist
                shortestDist = distance
                target = u
           
        return target

    /** Adds a random deviation to real variable. The interval of the deviation
        is the instance's deviation.*/
    private function getRealWithDeviation(real realToAdjust) returns real
        real realWithDeviation = GetRandomReal(realToAdjust*(1-spawnFrequencyDeviation),realToAdjust*(1+spawnFrequencyDeviation))
        if realWithDeviation < 0
            realWithDeviation = 0
        return realWithDeviation

    /** Spawns the unit, and if it's set, make effect and order attack*/
    private static function spawn()
        thistype instance = GetExpiredTimer().getData() castTo thistype

        // Finding Spawn Pos
        vec2 spawnPos
        if instance.spawnRect != null
            spawnPos = instance.spawnRect.randomPoint()
        else
            spawnPos = instance.spawnPos

        // Spawning units
        let spawnFacing = (instance.spawnFacing==-1) ? angle(GetRandomReal(0, 2*PI)) : angle(instance.spawnFacing)
        let spawnedUnit = createUnit(instance.owner, instance.unitId, spawnPos, spawnFacing)
        instance.spawnedUnits.add(spawnedUnit)
        instance.lastSpawnedUnit = spawnedUnit

        // Find target to attack on spawn
        if instance.targetOnSpawn != null
            spawnedUnit.issueTargetOrder("attack", instance.targetOnSpawn)

        else if instance.targetRect != null
            if instance.getNearestTarget
                let nearestTarget = instance.getNearestTargetInRect(spawnedUnit)
                if nearestTarget != null
                    spawnedUnit.issueTargetOrder("attack", nearestTarget )
            else
                let randomTarget = instance.getRandomTargetInRect()
                if randomTarget != null
                    spawnedUnit.issueTargetOrder("attack", randomTarget)        

        // Creating effects
        
        if instance.spawnEffect != null
            addEffect(instance.spawnEffect, spawnPos )
            ..destr()

        if instance.soundOnspawn != null
            instance.soundOnspawn.playOnPoint(spawnPos.toVec3()).snd.setVolume(90)

        // Running Remote Functions
        if instance.codeOnSpawn != null
            instance.codeOnSpawn.run(instance)

        /*  Rerun Timer
            It first checks if it's restricted by a number of spawns,
            or if it has spawned what it should.*/
        if( instance.spawnCount > 0 )
            instance.currentSpawnCount++
            if( instance.currentSpawnCount < instance.spawnCount )
                instance.timer_Spawn.start(instance.getRealWithDeviation(instance.spawnFrequency), function spawn)
            else
                instance.stopSpawning()
        else
            instance.timer_Spawn.start(instance.getRealWithDeviation(instance.spawnFrequency), function spawn)
  

    /** Spawns all the units for the spawner, instantly */
    function spawnAll()
        if spawnCount > 0
            spawnFrequency = 0
            spawnFrequencyDeviation = 0
            for i = 0 to spawnCount
                timer_Spawn.start(0,function spawn ) 



    function toString() returns string
        return ("UnitSpawner {0}:\n".highlight() +
                "   unitId = {1}\n" +
                "   spawnCount = {2}\n" +
                "   spawning = {3}\n" +
                "   currentSpawnCount = {4}\n" +
                "   spawned units = {5}\n" +
                "   summoned units = {6}" ).format(
                    id.toString(),
                    unitId.toRawCode().withColor(COLOR_ACCENT),
                    spawnCount.toString().withColor(COLOR_ACCENT),
                    spawning.toString().withColor(COLOR_ACCENT),
                    currentSpawnCount.toString().withColor(COLOR_ACCENT),
                    spawnedUnits.size().toString().withColor(COLOR_ACCENT),
                    summonedUnits.size().toString().withColor(COLOR_ACCENT)
                )
              

    
        

//---------------------------------------------------------------------------------------------------------------------------------------
// Other Stuff

/** Checks if the unit is spawned by any spawner*/
public function unit.isFromAnySpawner() returns boolean
    for spawner in UnitSpawner.allSpawners
        if spawner.spawnedUnits.has(this)
            return true

    return false

/** Checks if unit is spawned by a specific spawner */
public function unit.isFromSpawner(UnitSpawner whichSpawner) returns boolean
    return whichSpawner.spawnedUnits.has(this) or whichSpawner.summonedUnits.has(this)


/** Gets the unit spawner which the unit comes from. Returns null if it doesn't come from any spawner */
public function unit.getSpawner() returns UnitSpawner
    if UnitSpawner.allSpawners.size() > 0

        for spawner in UnitSpawner.allSpawners
            if spawner.spawnedUnits.has(this)
                return spawner
            if( spawner.summonedUnits.has(this) )
                return spawner
                
    return null

public interface RemoteFunction<UnitSpawner>
    function run(UnitSpawner unitSpawner)


init
    onLeave() ->
        let u = getEnterLeaveUnit()
        let spawner = u.getSpawner()
    
        if( spawner != null )
            spawner.removeUnit(u)




//================================================================================================================================================================================================
// Chat Command

init
    let cmd = defineUtilCommand("unitspawner")
    
    cmd.addSubCommand("all")
    ..setAction() (p, args, opts) ->
        SND_CLICK.playForPlayer(p)
        p.print("\nPrinting all UnitSpawner ids:", 15)
        if( UnitSpawner.allSpawners.size() == 0 )
            p.print("   No spawners...", 15)
        else
            for spawner in UnitSpawner.allSpawners
                p.print("    " + spawner.id.toString(), 15)
    
    cmd.addSubCommand("info")
    ..addArgument(ArgumentType.INT)
    ..setAction() (p, args, opts) ->
        let id = args.getInt()
        if( id < 0 )
            p.print("\nSpawner ID cannot be negative", 15)
            SND_ERROR.playForPlayer(p)
        else
            let spawner = UnitSpawner.getSpawner(id)
            if( spawner == null )
                p.print("\nCouldn't find spawner with ID {0}".format(id.toString().highlight()), 15)
            else
                p.print("\n" + spawner.toString())
                SND_CLICK.playForPlayer(p)
            
    cmd.addSubCommand("units")
    ..addArgument(ArgumentType.INT)
    ..setAction() (p, args, opts) ->
        let id = args.getInt()
        if( id < 0 )
            p.print("\nSpawner id must be 0 or positive!", 15)
            SND_ERROR.playForPlayer(p)
        else
            let spawner = UnitSpawner.getSpawner(id)
            if( spawner == null )
                p.print("\nCouldn't find spawner with id {0}".format(id.toString()).highlight(), 15)
            else
                p.print("\nPrinting units for spawner {0}".format(id.toString()).highlight(), 15)

                if( spawner.spawnedUnits.size() == 0)
                    p.print("No spawned units", 15)
                else
                    p.print("{0} spawned units:".format(spawner.spawnedUnits.size().toString()), 15)
                    for u in spawner.spawnedUnits
                        p.print("    {0} ({1})".format(u.getName(), u.isAlive() ? "alive" : "dead" ), 15)

                if( spawner.summonedUnits.size() == 0)
                    p.print("No summoned units", 15)
                else
                    p.print("{0} summoned units:".format(spawner.summonedUnits.size().toString()), 15)
                    for u in spawner.summonedUnits
                        p.print("    {0} ({1})".format(u.getName(), u.isAlive() ? "alive" : "dead" ), 15)
                   
                   