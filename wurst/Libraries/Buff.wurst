
//================================================================================================================================================================================================

package Buff

/*//================================================================================================================================================================================================

    Library to create custom buffs and allowing buff effects to stack from different unit.
    
    How to use:
        1) Define buff:
            This is the actual buff that will be applied to the target

                let MY_BUFF = compiletime(defineBuff(...))

        2) Implement Buff Class:
            The implementation defines the buff "type", and is used
            for when the buff will be added to the target.
            In onApply and onRemove you define the "buff logic"

                class MyBuff extends Buff
                    
                    construct()
                        super( MY_BUFF, ...)

                    override function onApply()
                        ...

                    override function onRemove()
                        ...
    
        3) Apply the buff:
            The buff is applied to the unit by creating an object of
            the extension of the buff class

                target.applyBuff(new MyBuff(), ... )
                 
*///===============================================================================================================================================================================================

import public Icons
import public Abilities

import CompileTimeData
import HashMap
import BuffObjEditing
import ObjectIds
import Orders
import ErrorHandling
import LinkedList
import OnUnitEnterLeave
import ObjectIdGenerator
import AbilityObjEditing
import RegisterEvents
import DummyCaster
import TimerUtils
import UnitStats

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// In pairs: buffId, abilId
let dataObj_CustomBuffs = compiletime(defineDataObj())
let buffAbilMap = new IterableMap<int,int>

/** Define a buff at compiletime. Use this with an extension of the Buff class, or use it
    with the unit.applyBuffSimple(...).. */
public function defineBuff(string name, string description, string icon, string sfx, string attach1, string attach2) returns int
    let attachCount = attach2 != "" ? 2 : 0    

    let buffId = BUFF_ID_GEN.next()
    new BuffDefinition(buffId, 'Binf')
    ..setName(1, name)
    ..setTooltipNormal(1, name)
    ..setTooltipNormalExtended(1, description)
    ..setIcon(icon)
    ..setArtTarget(1, sfx)
    ..setTargetAttachmentPoint0(1, attach1)
    ..setTargetAttachmentPoint1(1, attach2)
    ..setTargetAttachments(1,  attachCount)

    let abilId = ABIL_ID_GEN.next()
    new AbilityDefinitionInnerFireCreep(abilId)
    ..setName(name + "(buff ability)")
    ..setBuffs(1, buffId.toRawCode())
    ..setManaCost(1, 0)
    ..setTargetsAllowed(1, "air,ground,friend,enemy,neutral")
    ..setCastRange(1, 10000)
    ..setDurationHero(1, 0)
    ..setDurationNormal(1, 0)
    ..setCooldown(1, 0)
    ..setEffectSound("")
    ..setDamageIncrease(1, 0)
    ..setDefenseIncrease(1, 0)

    dataObj_CustomBuffs.addData(buffId.toRawCode())
    dataObj_CustomBuffs.addData(abilId.toRawCode())    

    return buffId

// Load buff ids from compiletime
init
    let data = dataObj_CustomBuffs.getData()
    while(data.size() > 0)
        buffAbilMap.put(data.dequeue().fromRawCode(), data.dequeue().fromRawCode())


/** Apply buff defined by 'defineBuff' function to this unit. This
    includes no logic applying or removal, and is probably not that
    interesting to use. */
public function unit.applyBuffSimple( int buffId, unit source)
    if( not buffAbilMap.has(buffId) )
        error("Buff map doesn't have buff "+buffId.toRawCode())

    let abilId = buffAbilMap.get(buffId)
    new DummyCaster()
    ..owner(source.getOwner())
    ..origin(this.getPos())
    ..castTarget(abilId, 1, Orders.innerfire, this)

let unitBuffMap = new HashMap<unit, IterableMap<int, LinkedList<Buff>>>


/**
    Apply your custom buff to this unit. Create a new object of your implementation
    of the Buff class. */
public function unit.applyBuff(Buff buffObject, unit source, real duration) 
    buffObject.source = source
    buffObject.target = this
    
    // Create / Get target's buff map
    if( not unitBuffMap.has(this) )
        unitBuffMap.put(this, new IterableMap<int, LinkedList<Buff>>)
    let buffMap = unitBuffMap.get(this)
    
    // Create / Get target's buff list of buff being applied
    if( not buffMap.has(buffObject.buffId) )
        buffMap.put(buffObject.buffId, new LinkedList<Buff>)
    let buffList = buffMap.get(buffObject.buffId)

    // Remove existing buff from source
    for unitBuff in buffList
        if( unitBuff.source == source )
            buffList.remove(unitBuff)
            destroy unitBuff

    // Destroying existing buffs if they don't stack
    if( buffList.size() > 0 and not buffObject.stacks )
        for unitBuff in buffList
            buffList.remove(unitBuff)
            destroy unitBuff

    // Apply new buff
    this.applyBuffSimple(buffObject.buffId, source ) // Apply buff (icons, effects etc)
    buffList.add(buffObject)
    buffObject.buffList = buffList
    buffObject.onApply()
    buffObject.setDuration(duration)


/** Remove ALL buffs of the particular type from this unit. This
    remove all instances of the buff, in case the buff is stackable
    by multiple players
    The buffid must have been applied via an implementation of the Buff
    class, using the unit.applyBuff(...) */
public function unit.removeBuff(int buffId) returns bool
    if( unitBuffMap.has(this) )
        let buffMap = unitBuffMap.get(this)
        if( buffMap.has(buffId) )
            let buffList = buffMap.get(buffId)
            var count = 0
            for unitBuff in buffList
                buffList.remove(unitBuff)
                destroy unitBuff
                count++
            return count > 0            
    return false


/** Returns true if the unit has a buff with a given ID, from the given unit source.
    The buff must be applied with unit.applyBuff(...). */ 
public function unit.hasBuff(int buffId, unit source) returns bool
    if( unitBuffMap.has(this) )
        let buffMap = unitBuffMap.get(this)
        if( buffMap.has(buffId))
            let buffList = buffMap.get(buffId)
            for unitBuff in buffList
                if( unitBuff.source == source )
                    return true
    return false
    

/** Returns true if the unit has a buff with a given ID, from any unit source.
    The buff must have been applied with unit.applyBuff(...). */ 
public function unit.hasBuff(int buffId) returns bool
    if( unitBuffMap.has(this) )
        let buffMap = unitBuffMap.get(this)
        if( buffMap.has(buffId))
            return buffMap.get(buffId).size() > 0
    return false
    


/**
    Buff class which defines the logic of a buff. It uses a buff id
    defined by 'defineBuff'.
    When the buff is applied to a target, the onApply() function is
    run, and when its removed, the onRemove() function is called.
    Use the internal variables 'source' and 'target' to get the
    buff source and target. These MAY BE NULL. */
public abstract class Buff
    protected timer durationTimer
    protected LinkedList<Buff> buffList = null // The list of buffs it belongs to

    protected bool stacks
    protected int buffId
    protected unit source = null
    protected unit target = null
    protected real duration = 0

    construct(int buffId, bool stacks)
        this.buffId = buffId
        this.stacks = stacks
        durationTimer = getTimer()
        ..setData(this castTo int)

    ondestroy
        // Remove buff From list
        if( buffList != null and buffList.has(this) ) 
            buffList.remove(this)

        // Remove actual buff if this was the last buff
        if( buffList.size() == 0 and target != null)
            target.removeAbility(buffId)

        onRemove()
        durationTimer.release()

    /** Is run when a buff of this type is applied to a unit. Use
        the internal variables 'source' and 'target' to get the
        buff source and target. These MAY BE NULL */
    function onApply()
        skip

    /** Is run when a buff of this type is removed from a unit. Use
        the internal variables 'source' and 'target' to get the
        buff source and target. These MAY BE NULL */
    function onRemove()
        skip

    /** Set the duration of the buff. If the duration has already been set, this resets
        restarts the duration with the new duration. */
    function setDuration(real duration)
        if( duration > 0)
            this.duration = duration
            durationTimer.start(duration, () -> destroy GetExpiredTimer().getData() castTo thistype )
        
    /** Gets the remaining duration of the buff */
    function remainingDuration() returns real
        return durationTimer.getRemaining()
        


function unit.removeAllBuffs()
    if( unitBuffMap.has(this))
        let buffMap = unitBuffMap.getAndRemove(this)  
        for buffId in buffMap
            let buffList = buffMap.get(buffId)
            for unitBuff in buffList
                destroy unitBuff
            destroy buffList
        destroy buffMap


function unit.removeAllBuffs(int buffId)
    if( unitBuffMap.has(this))
        let buffMap = unitBuffMap.getAndRemove(this)
        if( buffMap.has(buffId) )
            let buffList = buffMap.get(buffId)  
            for unitBuff in buffList
                destroy unitBuff


init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        GetDyingUnit().removeAllBuffs()
    
    onLeave() ->
        getEnterLeaveUnit().removeAllBuffs()

    beforeUnitStatsDeregistered() u -> 
        u.removeAllBuffs()
