
//================================================================================================================================================================================================
 //  LIGHTNING LORDS

package Round12

//================================================================================================================================================================================================

import public Round11

import TimerUtils
import RegisterEvents
import AutoCastAbility
import LightningCharge
import LightningUtil
import GroupUtilsX
import TimedSpecialEffects
import UnitVisualsUtils
import InstantDummyCaster
import Damage


//=========================================================================================================================================================
// Settings 

let STORM_LOAD = 'n00E'
let STORM_WARD = 'h003'

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

let LIGHTNINGWARD_DMG_FACTOR = 1.5

let LIGHTNINGCHARGE_DMG_FACTOR = 10.
let LIGHTNINGCHARGE_RANGE = 350.
let LIGHTNINGCHARGE_DURATION = 8.

//================================================================================================================================================================================================

Round round = null
init
  
    round = new Round()
    ..setReward(30, 4)
    ..addItemRewards(ITEM_STORMLORDCROWN)
    ..addArtifactRewards(1)
    ..setTitle("Stormlords")
    ..setDescription("Don't go get thunder struck now.")
    ..setHealthOrbSpawn(100, 75, 0.1, 25, 0.05)

    // Spawner 1

    round.addSpawner(new UnitSpawner('n00E', ENEMY, vec2(-639,1025), 23))
    ..setStartDelay(3)
    ..setFrequencyDeviation(0.1)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(5)

    //Spawner 2
    round.addSpawner(new UnitSpawner('n00E', ENEMY, vec2(0,0), 50))
    ..setStartDelay(70)
    ..setFrequencyDeviation(0.1)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(2)


//================================================================================================================================================================================================
// STATS SCALING

    round.setStatScalingCallback() (unit u) ->
        let id = u.getTypeId()
        if( id ==  STORM_LOAD or id == STORM_WARD)
            round.scaleUnitStats(u)
            u.adjustToDifficulty()


public class DelayedBloodlustCast

    private unit target

    construct(unit target, real delay)
        this.target = target
        getTimer()
        ..setData(this castTo int)
        ..start(delay, function castBloodLust)


    private static function castBloodLust()
        let t = GetExpiredTimer()
        let instance = t.getData() castTo thistype

        InstantDummyCaster.castTarget(instance.target.getOwner(), 'A015', 1, Orders.bloodlust, instance.target)

        t.release()
        destroy instance


function lightningChargeCast()

    
    let caster = GetSpellAbilityUnit()
    
    new DelayedBloodlustCast(caster, 0.25)
    
    
    new LightningCharge(caster, caster.getPower() * LIGHTNINGCHARGE_DMG_FACTOR, LIGHTNINGCHARGE_RANGE, LIGHTNINGCHARGE_DURATION)


function entersMap() returns boolean
    return false


init
    registerSpellEffectEvent('A016', function lightningChargeCast )
    registerSpellEffectEvent('A019', function SummonLightningWard.onCast )

    addAutoCastAbilityToUnitType('n00E', new AutoCastAbilityType( 'A016', Orders.roar, TargetType.ENEMY_IMMEDIATE, 200, 8, 25 ))
    addAutoCastAbilityToUnitType('n00E', new AutoCastBoundWard( 1000, 2, 18, gg_rct_Arena_Spawn1 ))


    let map = CreateRegion()..addRect(GetPlayableMapRect())

    CreateTrigger()
    ..registerEnterRegion(map, Condition(function entersMap))

    UnitVisuals.addUnitType('n00E')
    ..setPlayerColor(PLAYER_COLOR_NAVY)



public class AutoCastBoundWard extends AutoCastAbilityType
    /* --------------------------------------------------------------------------------
    Bound Ward
    A ward which is bound to be created within an area.
    */

    rect rectBound
        
    construct( real triggerRange, real startCooldown, real cooldown, rect whichRect )
        super( 'A019', Orders.carrionswarm, TargetType.ENEMY_POINT, triggerRange, startCooldown, cooldown )

        rectBound = whichRect
            
    override function findTarget(unit caster) returns boolean

        let targets = ENUM_GROUP..enumUnitsInRange(caster.getPos(), triggerRange)
                
        if targets.size() > 0
            
            // Removing unfit targets
            for target in targets

                if not target.isAlive() or target == caster or not target.getOwner().isEnemyOf(caster.getOwner())
                    targets.removeUnit(target)
    

        if targets.size() > 0

            let casterPos = caster.getPos()
            let casterFacing = caster.getFacingAngle()
            let angleDirection = (GetRandomInt(0,2) == 1) ? -1 : 1
            let direction = casterFacing.op_plus(angle(GetRandomReal(PIHALF*0.75, PIHALF*1.25)*angleDirection))
            let targetPos = casterPos.polarOffset(direction, 400)
            
            while not rectBound.contains(targetPos)
                targetPos.moveTowards(rectBound.getCenter(), 50)

            caster.issuePointOrderById(orderId, targetPos)
            targets.clear()
        
            return true

        return false


    

// This is actually just a group of functions (not object funcitonality)
public class SummonLightningWard

    static function onCast()
        let caster = GetSpellAbilityUnit()
        let ward = createUnit( caster.getOwner(), 'h003', vec2(GetSpellTargetX(), GetSpellTargetY()), angle(GetRandomReal(0, PI2)) )

        new LightningWard(ward, 75, 2, 4000, caster.getPower() * LIGHTNINGWARD_DMG_FACTOR)

        caster.getSpawner().addSummonedUnit(ward)

    

public class LightningWard

    private unit    ward
    private timer   timer_Effect
    private real    zOffset
    private real    range
    private real    damage
        

    /** Creates a new instance, using an existing ward unit */
    construct(unit ward, real zOffset, real effectFrequency, real range, real damage)
        this.ward = ward
        this.zOffset = zOffset 
        this.range = range
        this.damage = damage

        timer_Effect = getTimer()
        ..setData(this castTo int)
        ..startPeriodic(effectFrequency, function callback_StartEffect )
        

    ondestroy
        if timer_Effect != null
            timer_Effect.release()    


    /** Gets the ward unit */
    protected function getWard() returns unit 
        if ward != null
            return ward
        else
            destroy this
            return null


    /** Makes the ward damage the unit */
    protected function damage(unit target)

        target.addEffect("Abilities\\Weapons\\Bolt\\BoltImpact.mdl", "chest")
        ..setDuration(4.)

        ward.addEffect("Abilities\\Spells\\Orc\\Purge\\PurgeBuffTarget.mdl", "origin" )
        ..setDuration(2.)

        addEffect("Abilities\\Weapons\\Bolt\\BoltImpact.mdl", ward.getPos().withTerrainZ(75) )
        ..setDuration(4)

        new Lightning(LIGHTNING_FORKED_LIGHTNING, 1)
        ..setSource(ward, zOffset)
        ..setTarget(target, 75)
        ..setRemoveOnUnitDeath(true)

        ward.damageTargetSpell(target, damage)


    /** Finds the the target for the effect */
    protected function findTarget() returns unit

        let targets = ENUM_GROUP..enumUnitsInRange(ward.getPos(), range)
        
        for target in targets
            if not target.getOwner().isEnemyOf(ward.getOwner()) or not target.isAlive()
                targets.removeUnit(target)
    
        if targets.isEmpty()
            return null
        else
            return targets.getNearestUnit(ward.getPos())

    

    /** Checks if the ward is still active */
    protected function isAlive() returns boolean
        return ward != null and ward.isAlive()


    /** Starts whatever effect has been set to this ward */
    protected function startEffect()

        if isAlive()
            let target = findTarget()

            if target != null
                damage(target)
        
        else
            destroy this
        
        
    /** Fires the startEffect() for the instance */
    private static function callback_StartEffect()
        GetExpiredTimer().getData() castTo thistype.startEffect()


    

    
