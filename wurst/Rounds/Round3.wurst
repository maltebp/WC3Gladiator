package Round3

import public Round2
import Updater
import ClosureTimers
import Assets
import TimedSpecialEffects
import ClosureForGroups
import DummyRecycler
import MyLibrary
import Damage
import ObjectIdGenerator
import AbilityObjEditing
import AutoCastAbility
import RegisterEvents
import Projectile
import GroupUtilsX
import HashMap
import OnUnitEnterLeave


let ARCANE_BEING = 'n008'

let EXPLOSION_DMG_FACTOR = 7.5 
let EXPLOSION_DAMAGE = 75. // Base
let EXPLOSION_COUNTDOWN = 3.
let EXPLOSION_DELAY = 0.5
let EXPLOSION_RANGE = 200 // BASE
let EXPLOSION_MINDAMAGE = 0.5 // Percentage

let MISSILES_DAMAGE_FACTOR = 1.5
let MISSILES_RANGE = 2000.
let MISSILES_COOLDOWN = 10.

let MISSILES_ID = compiletime(ABIL_ID_GEN.next() )
let MISSILES_SOUND = new SoundDefinition(Sounds.shimmeringPortalEntrance, false, true)

Round round = null

init
    //=========================================================================================================================================================
    //  Arcane BEINGS (Round 2)

    round = new Round
    ..setReward(30, 3)
    ..addItemRewards(ITEM_MAGICTALISMAN, ITEM_MAGICGEM)
    ..addArtifactRewards(1)
    ..setTitle("Arcane Beings")
    ..setDescription("These beings can grow big - but even though that sounds fascinating, you probably shouldn't let them.")
    ..setHealthOrbSpawn(100, 50, 0.1, 25, 0.02)

    RemoteFunction<UnitSpawner> func

    // Spawner 1
    func = (UnitSpawner spawner) -> begin
        new Grow(spawner.getLastSpawnedUnit(),1.1)
    end

    round.addSpawner(new UnitSpawner(ARCANE_BEING, ENEMY, vec2(-639,1025), 12))
    ..setStartDelay(3)
    ..setFrequencyDeviation(0.05)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(10)
    ..setSpawnEffect("Abilities\\Spells\\Undead\\DeathPact\\DeathPactTarget.mdl")
    ..setCodeOnSpawn(func)
    ..setSoundOnSpawn(Sounds.obsidianAvengerWhat2)

    
    //Spawner 2
    func = (UnitSpawner spawner) -> begin
        new Grow(spawner.getLastSpawnedUnit(),1.1)
    end

    round.addSpawner(new UnitSpawner(ARCANE_BEING, ENEMY, vec2(527,1025), 25))
    ..setStartDelay(20)
    ..setFrequencyDeviation(0.03)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(4)
    ..setSpawnEffect("Abilities\\Spells\\Undead\\DeathPact\\DeathPactTarget.mdl")
    ..setCodeOnSpawn(func)
    ..setSoundOnSpawn(Sounds.obsidianAvengerWhat2)

    
    //Spawner 3
    func = (UnitSpawner spawner) -> begin   
        new Grow(spawner.getLastSpawnedUnit(),1.1)
    end

    round.addSpawner(new UnitSpawner(ARCANE_BEING, ENEMY, vec2(527,1025), 25))
    ..setStartDelay(80)
    ..setFrequencyDeviation(0.03)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(2)
    ..setSpawnEffect("Abilities\\Spells\\Undead\\DeathPact\\DeathPactTarget.mdl")
    ..setCodeOnSpawn(func)
    ..setSoundOnSpawn(Sounds.obsidianAvengerWhat2)

    addAutoCastAbilityToUnitType(ARCANE_BEING, new AutoCastAbilityType( MISSILES_ID, Orders.roar, TargetType.ENEMY_IMMEDIATE, MISSILES_RANGE, 5, MISSILES_COOLDOWN ))



//================================================================================================================================================================================================
// STATS SCALING

    round.setStatScalingCallback() (unit u) ->
        let id = u.getTypeId()
        if( id == ARCANE_BEING )
            round.scaleUnitStats(u)
            u.adjustToDifficulty()


// ======================================================================================================================================
// GROW

class Grow extends Updater

    protected static let instances = new IterableMap<unit, thistype>
    
    private static let GROWTH_DURATION = 30
    private static let GROWTH_SCALE = 0.75                  // Final scale increase in %
    private static let GROWTH_DMG = 3.5                     // Final DMG increase in %

    private static let GROWTH_FREQ = 0.5

    private static let GROWTH_MAXCOUNT = (GROWTH_DURATION/GROWTH_FREQ).toInt()

    private real startScale

    private real damagePerGrowth
    private real scalePerGrowth

    private integer growthCounter = 1 
    private unit    mob = null 

    construct(unit whichUnit, real startScale)
        mob = whichUnit
    
        this.startScale = startScale
        
        scalePerGrowth = (startScale * GROWTH_SCALE) / I2R(GROWTH_MAXCOUNT)
        damagePerGrowth = GROWTH_DMG / GROWTH_MAXCOUNT
        
        updateFreq = GROWTH_FREQ

        instances.put(mob, this)
        startUpdate()

    ondestroy
        if( mob == null )
            Log.warn("Arcane being was null when trying to destroy")
        else
            instances.remove(mob)


    override function update()
        if( mob != null )
            if( not mob.isAliveTrick() )
                new ArcaneExplosion(mob.getPos(), growthCounter, mob.getPower() * EXPLOSION_DMG_FACTOR )
                destroy this

            else if ( growthCounter <= GROWTH_MAXCOUNT )
                growthCounter = growthCounter + 1

                mob.adjustStatPercentage(STAT_DAMAGE, damagePerGrowth) 
                mob.setScale(startScale+scalePerGrowth*growthCounter)
        else
            destroy this

init
    onLeave() ->
        let u = getEnterLeaveUnit()
        if( u.getTypeId() == ARCANE_BEING )
            let growInstance = Grow.instances.get(u)
            if( growInstance != null )
                destroy growInstance
            
            




// ======================================================================================================================================
// ARCANE EXPLOSION
        

class ArcaneExplosion
    private vec3 pos
    private int growthCount
    private real damage

    private effect array[2] sfx 

    construct( vec2 pos, int growthCount, real damage )

        this.pos = pos.withTerrainZ() - vec3(-20, 0, 0) // apparently the position is off by a lil bit
        this.growthCount = growthCount
        this.damage = damage

        sfx[0] = addEffect( Units.wisp1, pos + vec3(0,0,30))
        ..setScale( 1 * (1. + growthCount/75.) )
        ..setColorByPlayer( Player(3) )
        ..setColor(255, 100, 255)

        sfx[1] = addEffect( Units.wisp1, pos + vec3(0,0,30))
        ..setScale( 0.8 * (1. + growthCount/75.) )
        ..setColorByPlayer( Player(21) )

        doAfter( EXPLOSION_COUNTDOWN ) ->
            this.explode()
    

    private function explode()

        sfx[0].destr()
        sfx[1].destr()

        doAfter( EXPLOSION_DELAY ) ->

            addEffect( Abilities.orbOfDeathMissile, this.pos + vec3(0,0,30) )
            ..setScale(1.2 * (1. + growthCount/75.))
            ..setTimeScale(0.75)
            ..destr()
            
            addEffect( Abilities.steamTankImpact, this.pos )
            ..setScale(0.6 * (1. + growthCount/75.))
            ..destr()

            addEffect( Units.wispExplode, this.pos )
            ..setScale(0.6 * (1. + growthCount/50.))
            ..setTime(0.3)
            ..setTimeScale(1.5)
            ..setDuration(4)

            let scaledRange = EXPLOSION_RANGE * (1. + growthCount/75.)

            let pos2 = pos.toVec2()
            let source = DummyRecycler.get(pos2, angle(0))

            forUnitsInRange(pos2, scaledRange) target ->
                if target.getOwner().isEnemyOf(ENEMY)
                    flashEffect(Abilities.blackKeeperMissile, target, "chest")

                    let distance = target.getPos().distanceTo(pos2)
                    let adjustedDamage = damage * (1 - (distance/scaledRange) * (1.-EXPLOSION_MINDAMAGE) )

                    source.damageTargetSpell(target, adjustedDamage)
            

            destroy this

    ondestroy
        
        
            

// ======================================================================================================================================
// MISSILES

@compiletime
function createMissilesAbility()
    
    new AbilityDefinitionRoarcreep(MISSILES_ID)
    ..setManaCost(1, 0)
    ..setCooldown(1, 0)
    ..setTargetsAllowed(1, "none")
    ..setArtCaster("")
    ..setAnimationNames("spell")

init
    registerSpellEffectEvent( MISSILES_ID) ->
        let caster = GetSpellAbilityUnit()

        let casterDamage = caster.getPower() * MISSILES_DAMAGE_FACTOR
        MISSILES_SOUND.playOnPoint(caster.getPos3Real())
        
        forEnemiesInRange( ENEMY, caster.getPos(), MISSILES_RANGE ) target ->
            let projectile = new Projectile( caster.getPos().withTerrainZ(75), Abilities.druidoftheTalonMissile)
            ..fireUnit(target, 50, true, 800, 0)
            ..addActionOnFinish() ->
                caster.damageTargetSpell(target, casterDamage)
                target.addEffect( Abilities.blackKeeperMissile, "chest")
                ..destr()            
            projectile.getEffect().setScale(2)

            
        doAfter(1) ->
            let units = ENUM_GROUP..enumEnemyTargets(caster.getOwner(), caster.getPos(), 5000)
            caster.issueTargetOrderById(Orders.attack, units.getNearestUnit(caster.getPos()) )
            units.clear()
        
